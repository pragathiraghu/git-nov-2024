Key Differences:
Effect on History:

git revert does not rewrite history. It adds a new commit that undoes a previous commit.
git rebase rewrites history by applying commits to a different base.

Use Case:
git revert is used to undo changes without affecting the commit history, often used when working with others.
git rebase is used to modify commit history, usually before merging or pushing changes.
Impact:

git revert keeps the commit history intact and adds a new commit to undo changes.
git rebase can make the history cleaner and linear, but it changes commit hashes, which can cause issues in shared branches if not used carefully.

In Summary:
Revert: Undo a commit with a new commit, preserving history.
Rebase: Reapply commits on top of another base, rewriting history.

GIT REVERT
Use case: It’s used when you want to undo changes in a commit but keep the history intact. It's often used in shared or public repositories where you don't want to rewrite history.
GIT REBASE
Use case: It’s used to clean up commit history before merging or pushing, making the history more linear and easier to understand. It’s particularly useful when working with feature branches before merging them into the main branch.
